program    = _{ SOI ~ NEWLINE* ~ (stmt ~ NEWLINE+)* ~ stmt? ~ EOI }
WHITESPACE = _{ " " | "\t" }

// I like that this can just be done in 3 line
COMMENT           = _{ SingleLineComment | MultiLineComment }
SingleLineComment =  { "//" ~ (!NEWLINE ~ ANY)* }
MultiLineComment  =  { "/*" ~ (!"*/" ~ ANY)* ~ "*/" }

stmt = _{
    qbitAssignment
  | variableAssignment
  | unitary
  | procedure
	| return
}

ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
var   = @{ ident ~ ("[" ~ mathExpr ~ "]")? }
ket   =  { "(" ~ ketExpr ~ "," ~ ketExpr ~ ")" }

qbitAssignment       = _{ singleQbitAssignment }
singleQbitAssignment =  { "qub" ~ ident ~ "=" ~ (ket | ident) }

variableAssignment = { "let" ~ ident ~ "=" ~ assignmentValue }

assignmentValue = _{ singleValue | ketValue }
singleValue = { mathExpr }
ketValue = { expr }

unitary        = _{
    functionUnitary
  | matrixUnitary
}
unitaryKeyword =  _{ "unit" }
matrixRow      =  {
    (matrixItem ~ ",")*
}

matrixItem = {
    expr
}

matrix         =  {
    "[[" ~ NEWLINE ~ (matrixRow ~ NEWLINE)+ ~ "]]"
}

paramDefs = !{
	"(" ~ ident? ~ ("," ~ ident)* ~ ","? ~ ")"
}
parameter = {
  expr
}
parameters = !{
    "(" ~ parameter? ~ ("," ~ parameter)* ~ ","? ~ ")"
}

matrixUnitary   =  {
    unitaryKeyword ~ ident ~ "=" ~ matrix
}
functionUnitary =  {
    unitaryKeyword ~ ident ~ paramDefs ~ functionBlock
}
functionCall    = ${
    ident ~ parameters+
}

lambdaList = {
	ident ~ "[" ~ mathExpr ~ "]"
}

listIndex = {
	ident ~ "[" ~ mathExpr ~ "]"
}

plambda = { 
  (parameters | lambdaList) ~ "=>" ~ functionBlock
}
ulambda = {
  (parameters | lambdaList) ~ "->" ~ functionBlock
}

lower = { mathExpr }
upper = { mathExpr }
range           =  { "(" ~ lower ~ ".." ~ upper ~ ")" }
forLoop         =  {
    "for" ~ ident ~ "in" ~ range ~ functionBlock
}
returnExpr = { expr }
return          =  {
    "return" ~ (plambda | ulambda | returnExpr)
}
procstmt        = _{
    forLoop
  | functionCall
  | variableAssignment
  | return
}

type             =  { ident ~ ("(" ~ expr ~ ")")? }
functionBlock    =  { "{" ~ NEWLINE* ~ (procstmt ~ NEWLINE+)* ~ procstmt? ~ "}" }
procedureKeyword =  _{ "proc" }
procedure        =  {
    procedureKeyword ~ ident ~ parameters ~ "->" ~ type ~ functionBlock
}

// parse all types of numbers and their operations
int = @{ ASCII_DIGIT+ }
num = @{
    int ~ ("." ~ ASCII_DIGIT+)?
}

operation = _{ add | subtract | multiply | divide | power }
add       =  { "+" }
subtract  =  { "-" }
negate  =  { "-" }
multiply  =  { "*" }
divide    =  { "/" }
power     =  { "^" }
imaginary =  { "i" }
pi        =  { "pi" }

prefix = _{
    negate
}

postfix = _{
    imaginary
}

primary  = _{ functionCall | "(" ~ mathExpr ~ ")" | listIndex | pi | imaginary | num | var }
term     = _{ prefix? ~ primary ~ postfix? }
mathExpr = _{ term ~ (operation ~ term)* }
ketExpr = { mathExpr }

expr = _{
    mathExpr
  | ket
  | matrix
}

